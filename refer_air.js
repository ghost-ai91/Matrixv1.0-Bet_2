// referrer_register_v2.js - AIRDROP SYSTEM VERSION
// Script para registrar usu√°rio com referenciador no sistema de airdrop de 36 semanas

const { 
  Connection, 
  Keypair, 
  PublicKey, 
  TransactionMessage, 
  VersionedTransaction,
  ComputeBudgetProgram,
  TransactionInstruction,
  Transaction,
  SystemProgram
} = require('@solana/web3.js');
const { AnchorProvider, Program, BN, Wallet, utils } = require('@coral-xyz/anchor');
const fs = require('fs');
const path = require('path');

// Par√¢metros da linha de comando
const args = process.argv.slice(2);
const walletPath = args[0] || './carteiras/carteira1.json';
const configPath = args[1] || './matriz-airdrop-config.json';
const referrerAddressStr = args[2]; // Endere√ßo do referenciador
const altAddress = args[3]; // Endere√ßo da ALT (opcional)

// Fun√ß√£o para mostrar detalhes completos da Address Lookup Table
async function getAddressLookupTable(connection, altAddress) {
  console.log("\nüìã CARREGANDO ADDRESS LOOKUP TABLE:");
  
  try {
    const lookupTableInfo = await connection.getAddressLookupTable(new PublicKey(altAddress));
    if (!lookupTableInfo.value) {
      console.log("‚ùå ALT n√£o encontrada!");
      return null;
    }
    
    const lookupTable = lookupTableInfo.value;
    console.log(`‚úÖ ALT encontrada: ${altAddress}`);
    console.log(`üî¢ Total de endere√ßos: ${lookupTable.state.addresses.length}`);
    console.log(`üîë Autoridade: ${lookupTable.state.authority ? lookupTable.state.authority.toString() : 'Nenhuma'}`);
    
    console.log("\nüìã LISTA COMPLETA DE ENDERE√áOS:");
    lookupTable.state.addresses.forEach((address, index) => {
      console.log(`  ${index}: ${address.toString()}`);
    });
    
    return lookupTable;
  } catch (error) {
    console.error(`‚ùå Erro ao carregar ALT: ${error}`);
    return null;
  }
}

// FUN√á√ÉO CORRIGIDA: Preparar TODOS os uplines para SLOT 3 - VALIDA√á√ÉO RIGOROSA
async function prepareAllUplinesForSlot3(connection, program, referrerInfo, TOKEN_MINT) {
  const remainingAccounts = [];
  const triosInfo = [];

  console.log(`\nüîÑ PREPARANDO TODOS OS UPLINES PARA SLOT 3 - SISTEMA DE AIRDROP`);
  console.log(`üìä Referenciador tem ${referrerInfo.upline.upline.length} uplines`);
  
  if (referrerInfo.upline.upline.length === 0) {
    console.log("‚úÖ Usu√°rio base detectado - sem uplines necess√°rios");
    return remainingAccounts;
  }

  // CR√çTICO: Processar TODOS os uplines (o contrato exige EXATAMENTE todos)
  for (let i = 0; i < referrerInfo.upline.upline.length; i++) {
    const uplineEntry = referrerInfo.upline.upline[i];
    const uplinePDA = uplineEntry.pda;
    const uplineWallet = uplineEntry.wallet;
    
    console.log(`  Processando upline ${i + 1}/${referrerInfo.upline.upline.length}`);
    console.log(`    PDA: ${uplinePDA.toString()}`);
    console.log(`    Wallet: ${uplineWallet.toString()}`);

    try {
      // Verificar se conta upline existe e est√° registrada
      const uplineAccountInfo = await program.account.userAccount.fetch(uplinePDA);
      
      if (!uplineAccountInfo.isRegistered) {
        console.log(`    ‚ùå Upline n√£o est√° registrado!`);
        throw new Error(`Upline ${uplinePDA.toString()} n√£o est√° registrado`);
      }

      // AIRDROP SYSTEM: Mostrar info do airdrop do upline
      console.log(`    üìä Matrizes completadas: ${uplineAccountInfo.completedMatricesTotal.toString()}`);
      console.log(`    üí∞ DONUT ganho: ${uplineAccountInfo.totalDonutEarned.toString()}`);
      console.log(`    üéÅ DONUT coletado: ${uplineAccountInfo.totalDonutClaimed.toString()}`);

      // Derivar ATA para o upline
      const uplineTokenAccount = utils.token.associatedAddress({
        mint: TOKEN_MINT,
        owner: uplineWallet,
      });

      console.log(`    üí∞ ATA: ${uplineTokenAccount.toString()}`);

      // Verificar se ATA existe
      const ataInfo = await connection.getAccountInfo(uplineTokenAccount);
      if (!ataInfo) {
        console.log(`    ‚ö†Ô∏è ATA n√£o existe - ser√° tratado pelo contrato`);
      } else {
        console.log(`    ‚úÖ ATA existe`);
      }

      // Armazenar informa√ß√µes do trio
      triosInfo.push({
        pda: uplinePDA,
        wallet: uplineWallet,
        ata: uplineTokenAccount,
        index: i
      });

    } catch (e) {
      console.log(`    ‚ùå Erro ao processar upline: ${e.message}`);
      throw new Error(`Falha ao processar upline ${i + 1}: ${e.message}`);
    }
  }

  // CR√çTICO: Contrato espera uplines em ordem reversa (mais recente primeiro)
  // Como referrerInfo.upline.upline j√° est√° em ordem cronol√≥gica (mais antigo primeiro),
  // precisamos reverter para atender expectativas do contrato
  triosInfo.reverse();
  
  console.log(`\nüìä ORDEM DE PROCESSAMENTO DOS UPLINES (Mais recente ‚Üí Mais antigo):`);
  for (let i = 0; i < triosInfo.length; i++) {
    console.log(`  ${i + 1}. PDA: ${triosInfo[i].pda.toString()}`);
    console.log(`    Wallet: ${triosInfo[i].wallet.toString()}`);
    console.log(`    ATA: ${triosInfo[i].ata.toString()}`);
  }

  // Construir array remainingAccounts com TODOS os trios na ordem correta
  for (let i = 0; i < triosInfo.length; i++) {
    const trio = triosInfo[i];

    // Adicionar trio: PDA, Wallet, ATA
    remainingAccounts.push({
      pubkey: trio.pda,
      isWritable: true,
      isSigner: false,
    });

    remainingAccounts.push({
      pubkey: trio.wallet,
      isWritable: true,
      isSigner: false,
    });

    remainingAccounts.push({
      pubkey: trio.ata,
      isWritable: true,
      isSigner: false,
    });
  }

  // VALIDA√á√ÉO CR√çTICA: Deve ser m√∫ltiplo de 3
  if (remainingAccounts.length % 3 !== 0) {
    throw new Error("ERRO CR√çTICO: N√∫mero de contas upline n√£o √© m√∫ltiplo de 3!");
  }

  const totalTrios = remainingAccounts.length / 3;
  console.log(`\n‚úÖ VALIDA√á√ÉO SLOT 3 COMPLETA:`);
  console.log(`  üìä Uplines esperados: ${referrerInfo.upline.upline.length}`);
  console.log(`  üìä Trios processados: ${totalTrios}`);
  console.log(`  üìä Total de contas: ${remainingAccounts.length}`);
  console.log(`  ‚úÖ Requisito do contrato: EXATAMENTE ${7 + remainingAccounts.length} contas`);

  return remainingAccounts;
}

// Fun√ß√£o para criar ATA do referenciador se n√£o existir
async function ensureReferrerATA(connection, provider, referrerWallet, TOKEN_MINT, payerWallet) {
  const referrerTokenAccount = utils.token.associatedAddress({
    mint: TOKEN_MINT,
    owner: referrerWallet,
  });

  console.log(`üîç Verificando ATA do referenciador: ${referrerTokenAccount.toString()}`);

  const ataInfo = await connection.getAccountInfo(referrerTokenAccount);
  if (!ataInfo) {
    console.log("‚ö†Ô∏è ATA do referenciador n√£o existe, criando...");
    
    const createATAIx = new TransactionInstruction({
      keys: [
        { pubkey: payerWallet, isSigner: true, isWritable: true },
        { pubkey: referrerTokenAccount, isSigner: false, isWritable: true },
        { pubkey: referrerWallet, isSigner: false, isWritable: false },
        { pubkey: TOKEN_MINT, isSigner: false, isWritable: false },
        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
        { pubkey: new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"), isSigner: false, isWritable: false },
        { pubkey: new PublicKey("SysvarRent111111111111111111111111111111111"), isSigner: false, isWritable: false }
      ],
      programId: new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
      data: Buffer.from([])
    });
    
    const tx = new Transaction().add(createATAIx);
    tx.feePayer = payerWallet;
    const { blockhash } = await connection.getLatestBlockhash();
    tx.recentBlockhash = blockhash;
    
    const signedTx = await provider.wallet.signTransaction(tx);
    const txid = await connection.sendRawTransaction(signedTx.serialize());
    
    await connection.confirmTransaction(txid);
    console.log(`‚úÖ ATA do referenciador criada: ${txid}`);
  } else {
    console.log("‚úÖ ATA do referenciador j√° existe");
  }

  return referrerTokenAccount;
}

async function main() {
  try {
    console.log("üöÄ REGISTRANDO USU√ÅRIO COM REFERENCIADOR - SISTEMA DE AIRDROP v2.0 üöÄ");
    console.log("=======================================================================");
    console.log("üéØ Vers√£o: AIRDROP SYSTEM (36 semanas progressivas)");
    console.log("üî• Modelo: DEFLATIONARY (Swap + Burn)");

    // Verificar argumentos obrigat√≥rios
    if (!referrerAddressStr) {
      console.error("‚ùå ERRO: Endere√ßo do referenciador n√£o fornecido!");
      console.error("Por favor, especifique o endere√ßo do referenciador como terceiro argumento.");
      console.error("Exemplo: node referrer_register_v2.js /caminho/para/carteira.json ./matriz-airdrop-config.json EnderecoReferenciador [EnderecoALT]");
      return;
    }
    
    // Converter endere√ßo do referenciador
    const referrerAddress = new PublicKey(referrerAddressStr);
    
    // Carregar carteira
    console.log(`Carregando carteira de ${walletPath}...`);
    let walletKeypair;
    try {
      const secretKeyString = fs.readFileSync(walletPath, { encoding: 'utf8' });
      walletKeypair = Keypair.fromSecretKey(
        Uint8Array.from(JSON.parse(secretKeyString))
      );
    } catch (e) {
      console.error(`‚ùå Erro ao carregar carteira: ${e.message}`);
      return;
    }
    
    // Carregar IDL
    console.log("Carregando IDL...");
    const idlPath = path.resolve('./target/idl/referral_system.json');
    const idl = require(idlPath);
    
    // Carregar configura√ß√£o
    let config = {};
    if (fs.existsSync(configPath)) {
      console.log(`Carregando configura√ß√£o de ${configPath}...`);
      config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      console.log("‚úÖ Configura√ß√£o carregada com sucesso");
      
      // AIRDROP SYSTEM CHECK
      if (config.systemVersion === "airdrop-v2.0") {
        console.log("üéØ Sistema de airdrop detectado");
        console.log(`üìÖ Semana atual: ${config.currentWeek}`);
        console.log(`üé≤ Airdrop ativo: ${config.airdropActive ? "SIM" : "N√ÉO"}`);
        console.log(`üî• Sistema deflationary: ${config.hasDeflationary ? "ATIVO" : "INATIVO"}`);
      } else {
        console.log("‚ö†Ô∏è Configura√ß√£o legada detectada - pode n√£o ser compat√≠vel");
      }
    } else {
      console.log(`‚ö†Ô∏è Arquivo de configura√ß√£o n√£o encontrado em ${configPath}`);
      console.log("‚ö†Ô∏è Usando valores padr√£o para endere√ßos...");
    }
    
    // Configura√ß√£o da conex√£o
    const connection = new Connection('https://weathered-quiet-theorem.solana-devnet.quiknode.pro/198997b67cb51804baeb34ed2257274aa2b2d8c0', {
      commitment: 'confirmed',
      confirmTransactionInitialTimeout: 60000
    });
    console.log('Conectando √† Devnet');
    
    // Configurar endere√ßos importantes
    const MATRIX_PROGRAM_ID = new PublicKey(config.programId || "DeppEXXy7Bk91AW9hKppfZHK4qvPKLK83nGbh8pE3Goy");
    const TOKEN_MINT = new PublicKey(config.tokenMint || "CCTG4ZmGa9Nk9NVxbd1FXBNyKjyHSapuF9aU6zgcA3xz");
    const STATE_ADDRESS = new PublicKey(config.stateAddress || "FPndQRxvdZqum3QaEATCzDRn247B6YgsjgaK18fy5c8w");
     
    // Pool e vault addresses - AIRDROP VERSION
    const POOL_ADDRESS = new PublicKey("FrQ5KsAgjCe3FFg6ZENri8feDft54tgnATxyffcasuxU");
    
    // Vault A addresses (DONUT)
    const A_VAULT = new PublicKey("4ndfcH16GKY76bzDkKfyVwHMoF8oY75KES2VaAhUYksN");
    const A_VAULT_LP = new PublicKey("CocstBGbeDVyTJWxbWs4docwWapVADAo1xXQSh9RfPMz");
    const A_VAULT_LP_MINT = new PublicKey("6f2FVX5UT5uBtgknc8fDj119Z7DQoLJeKRmBq7j1zsVi");
    const A_TOKEN_VAULT = new PublicKey("6m1wvYoPrwjAnbuGMqpMoodQaq4VnZXRjrzufXnPSjmj");
    
    // Vault B addresses (SOL)
    const B_VAULT = new PublicKey("FERjPVNEa7Udq8CEv68h6tPL46Tq7ieE49HrE2wea3XT");
    const B_TOKEN_VAULT = new PublicKey("HZeLxbZ9uHtSpwZC3LBr4Nubd14iHwz7bRSghRZf5VCG");
    const B_VAULT_LP_MINT = new PublicKey("BvoAjwEDhpLzs3jtu4H72j96ShKT5rvZE9RP1vgpfSM");
    const B_VAULT_LP = new PublicKey("HJNs8hPTzs9i6AVFkRDDMFVEkrrUoV7H7LDZHdCWvxn7");
    const VAULT_PROGRAM = new PublicKey("24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi");
    
    // AIRDROP SYSTEM: Meteora AMM program
    const METEORA_AMM_PROGRAM = new PublicKey("Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB");
    
    // Chainlink addresses (Devnet)
    const CHAINLINK_PROGRAM = new PublicKey("HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny");
    const SOL_USD_FEED = new PublicKey("99B2bTijsU6f1GCT73HmdR7HCFFjGMBcPZY6jZ96ynrR");

    // Programas do sistema
    const WSOL_MINT = new PublicKey("So11111111111111111111111111111111111111112");
    const SPL_TOKEN_PROGRAM_ID = new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
    const SYSTEM_PROGRAM_ID = new PublicKey("11111111111111111111111111111111");
    const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
    const SYSVAR_RENT_PUBKEY = new PublicKey("SysvarRent111111111111111111111111111111111");
    
    // Criar wallet usando Anchor's Wallet class
    const anchorWallet = new Wallet(walletKeypair);
    
    // Configurar provider
    const provider = new AnchorProvider(
      connection,
      anchorWallet,
      { 
        commitment: 'confirmed',
        skipPreflight: true,
        preflightCommitment: 'processed',
      }
    );
    
    // Inicializar programa
    const program = new Program(idl, MATRIX_PROGRAM_ID, provider);
    
    // Verificar saldo da carteira
    console.log("\nüë§ CARTEIRA DO USU√ÅRIO: " + walletKeypair.publicKey.toString());
    console.log("üë• REFERENCIADOR: " + referrerAddress.toString());
    const balance = await connection.getBalance(walletKeypair.publicKey);
    console.log("üí∞ SALDO ATUAL: " + balance / 1e9 + " SOL");
    
    // Valor fixo do dep√≥sito (0.065 SOL)
    const FIXED_DEPOSIT_AMOUNT = 80_000_000;
    
    if (balance < FIXED_DEPOSIT_AMOUNT + 30000000) {
      console.error("‚ùå ERRO: Saldo insuficiente! Voc√™ precisa de pelo menos " + 
                   (FIXED_DEPOSIT_AMOUNT + 30000000) / 1e9 + " SOL");
      return;
    }
    
    // Verificar referenciador
    console.log("\nüîç VERIFICANDO REFERENCIADOR...");
    const [referrerAccount] = PublicKey.findProgramAddressSync(
      [Buffer.from("user_account"), referrerAddress.toBuffer()],
      MATRIX_PROGRAM_ID
    );
    console.log("üìÑ PDA DO REFERENCIADOR: " + referrerAccount.toString());
    
    let referrerInfo;
    try {
      referrerInfo = await program.account.userAccount.fetch(referrerAccount);
      if (!referrerInfo.isRegistered) {
        console.error("‚ùå ERRO: Referenciador n√£o est√° registrado!");
        return;
      }
      
      console.log("‚úÖ Referenciador verificado");
      console.log("üî¢ Depth: " + referrerInfo.upline.depth.toString());
      console.log("üìä Slots preenchidos: " + referrerInfo.chain.filledSlots + "/3");
      console.log("üë• N√∫mero de uplines: " + referrerInfo.upline.upline.length);
      
      // AIRDROP SYSTEM: Mostrar info do airdrop do referenciador
      console.log("\nüéØ INFORMA√á√ïES DO AIRDROP DO REFERENCIADOR:");
      console.log("üìä Matrizes completadas: " + referrerInfo.completedMatricesTotal.toString());
      console.log("üí∞ DONUT ganho: " + referrerInfo.totalDonutEarned.toString());
      console.log("üéÅ DONUT coletado: " + referrerInfo.totalDonutClaimed.toString());
      
      const available = referrerInfo.totalDonutEarned - referrerInfo.totalDonutClaimed;
      console.log("üéÅ Dispon√≠vel para claim: " + available.toString());
      console.log("üìÖ √öltima semana processada: " + referrerInfo.lastProcessedWeek.toString());
      
      // Verificar owner_wallet field
      if (referrerInfo.ownerWallet) {
        console.log("‚úÖ Referenciador tem campo owner_wallet: " + referrerInfo.ownerWallet.toString());
      }
      
      // Determinar o slot que ser√° preenchido
      const nextSlotIndex = referrerInfo.chain.filledSlots;
      if (nextSlotIndex >= 3) {
        console.log("‚ö†Ô∏è ATEN√á√ÉO: Matriz do referenciador j√° est√° completa!");
        return;
      }
      
      console.log("üéØ VOC√ä PREENCHER√Å O SLOT " + (nextSlotIndex + 1) + " DA MATRIZ");
      
      // CR√çTICO: Para SLOT 3, validar requisitos de upline
      if (nextSlotIndex === 2) {
        console.log("\nüîç SLOT 3 DETECTADO - VALIDANDO REQUISITOS DE UPLINE:");
        
        const isBaseUser = !referrerInfo.referrer || referrerInfo.upline.upline.length === 0;
        
        if (isBaseUser) {
          console.log("‚úÖ Referenciador √© usu√°rio base - sem uplines necess√°rios para SLOT 3");
        } else {
          console.log(`‚ö†Ô∏è Referenciador √© usu√°rio normal - DEVE fornecer TODOS os ${referrerInfo.upline.upline.length} uplines para SLOT 3`);
          console.log("üìã Isso √© exigido pelo contrato com sistema de airdrop");
          
          if (referrerInfo.upline.upline.length === 0) {
            console.error("‚ùå ERRO: Referenciador n√£o tem uplines mas n√£o √© usu√°rio base!");
            return;
          }
        }
      }
    } catch (e) {
      console.error("‚ùå Erro ao verificar referenciador:", e);
      return;
    }
    
    // Verificar conta do usu√°rio
    console.log("\nüîç VERIFICANDO SUA CONTA...");
    const [userAccount] = PublicKey.findProgramAddressSync(
      [Buffer.from("user_account"), walletKeypair.publicKey.toBuffer()],
      MATRIX_PROGRAM_ID
    );
    console.log("üìÑ CONTA DO USU√ÅRIO (PDA): " + userAccount.toString());
    
    try {
      const userInfo = await program.account.userAccount.fetch(userAccount);
      if (userInfo.isRegistered) {
        console.log("‚ö†Ô∏è Voc√™ j√° est√° registrado no sistema!");
        return;
      }
    } catch (e) {
      console.log("‚úÖ USU√ÅRIO AINDA N√ÉO REGISTRADO, PROSSEGUINDO COM REGISTRO...");
    }
    
    // Obter PDAs necess√°rias
    console.log("\nüîß OBTENDO PDAs NECESS√ÅRIAS...");
    
    // PDAs para autoridades
    const [tokenMintAuthority, tokenMintAuthorityBump] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_mint_authority")],
      MATRIX_PROGRAM_ID
    );
    console.log("üîë TOKEN_MINT_AUTHORITY: " + tokenMintAuthority.toString());
    
    const [vaultAuthority, vaultAuthorityBump] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_vault_authority")],
      MATRIX_PROGRAM_ID
    );
    console.log("üîë VAULT_AUTHORITY: " + vaultAuthority.toString());
    
    const [programSolVault, programSolVaultBump] = PublicKey.findProgramAddressSync(
      [Buffer.from("program_sol_vault")],
      MATRIX_PROGRAM_ID
    );
    console.log("üîë PROGRAM_SOL_VAULT: " + programSolVault.toString());
    
    // AIRDROP SYSTEM: PDAs para opera√ß√µes de swap/burn
    const [tempDonutVault, tempDonutVaultBump] = PublicKey.findProgramAddressSync(
      [Buffer.from("temp_donut_vault")],
      MATRIX_PROGRAM_ID
    );
    console.log("üî• TEMP_DONUT_VAULT: " + tempDonutVault.toString());
    
    const [tempDonutAuthority, tempDonutAuthorityBump] = PublicKey.findProgramAddressSync(
      [Buffer.from("temp_donut_authority")],
      MATRIX_PROGRAM_ID
    );
    console.log("üî• TEMP_DONUT_AUTHORITY: " + tempDonutAuthority.toString());
    
    // Token vault verificado
    const PROGRAM_TOKEN_VAULT = new PublicKey("6vcd7cv4tsqCmL1wFKe6H3ThCEgrpwfYFSiNyEWRFAp9");
    console.log("üîë PROGRAM_TOKEN_VAULT (VERIFICADO): " + PROGRAM_TOKEN_VAULT.toString());
    
    // Derivar carteira do referenciador e ATA
    const referrerWallet = referrerInfo.ownerWallet || referrerAddress;
    const referrerTokenAccount = await ensureReferrerATA(
      connection, 
      provider, 
      referrerWallet, 
      TOKEN_MINT, 
      walletKeypair.publicKey
    );
    
    // CR√çTICO: Preparar uplines para SLOT 3 com valida√ß√£o rigorosa
    let uplineAccounts = [];
    const isSlot3 = referrerInfo.chain.filledSlots === 2;
    
    if (isSlot3) {
      console.log("\nüîÑ PREPARANDO UPLINES PARA SLOT 3 - SISTEMA DE AIRDROP");
      
      try {
        uplineAccounts = await prepareAllUplinesForSlot3(
          connection, 
          program, 
          referrerInfo, 
          TOKEN_MINT
        );
        
        // Validar o total de contas esperado
        const baseAccounts = 7; // Pool + Vault A (4) + Chainlink (2)
        const expectedTotalAccounts = baseAccounts + uplineAccounts.length;
        
        console.log(`\nüìä VALIDA√á√ÉO DE CONTAS SLOT 3:`);
        console.log(`  Contas base: ${baseAccounts}`);
        console.log(`  Contas upline: ${uplineAccounts.length}`);
        console.log(`  Total esperado: ${expectedTotalAccounts}`);
        console.log(`  Contrato exige: EXATAMENTE ${expectedTotalAccounts} contas`);
        
      } catch (e) {
        console.error(`‚ùå Erro ao preparar uplines SLOT 3: ${e.message}`);
        return;
      }
    }
    
    // Verificar se ALT foi fornecida
    let lookupTableAccount = null;
    if (altAddress) {
      console.log("\nüîç CARREGANDO ADDRESS LOOKUP TABLE...");
      lookupTableAccount = await getAddressLookupTable(connection, altAddress);
      
      if (!lookupTableAccount) {
        console.error("‚ùå ERRO: Address Lookup Table n√£o encontrada ou inv√°lida!");
        return;
      }
    }
    
    // EXECUTAR REGISTRO COM TRANSA√á√ÉO VERSIONADA (se ALT dispon√≠vel) OU LEGACY
    console.log("\nüì§ PREPARANDO TRANSA√á√ÉO DE REGISTRO COM SISTEMA DE AIRDROP...");
    
    try {
      // Obter blockhash recente
      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();
      
      // Instru√ß√µes para aumentar limite de compute unit
      const modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({
        units: 1_400_000 // Aumentado para valida√ß√µes de airdrop
      });
      
      // Aumentar prioridade para transa√ß√£o cr√≠tica
      const setPriority = ComputeBudgetProgram.setComputeUnitPrice({
        microLamports: 10000
      });
      
      // Configurar contas Pool, Vault A e Chainlink para remaining_accounts
      const vaultAAccounts = [
        { pubkey: POOL_ADDRESS, isWritable: false, isSigner: false },      // Index 0: Pool
        { pubkey: A_VAULT, isWritable: false, isSigner: false },          // Index 1: Vault A state
        { pubkey: A_VAULT_LP, isWritable: false, isSigner: false },       // Index 2: Vault A LP
        { pubkey: A_VAULT_LP_MINT, isWritable: false, isSigner: false },  // Index 3: Vault A LP Mint
        { pubkey: A_TOKEN_VAULT, isWritable: false, isSigner: false },    // Index 4: Token A Vault
      ];
      
      const chainlinkAccounts = [
        { pubkey: SOL_USD_FEED, isWritable: false, isSigner: false },      // Index 5: Feed
        { pubkey: CHAINLINK_PROGRAM, isWritable: false, isSigner: false }, // Index 6: Program
      ];
      
      // Combinar todas as contas remaining na ORDEM EXATA esperada pelo contrato
      const allRemainingAccounts = [...vaultAAccounts, ...chainlinkAccounts, ...uplineAccounts];
      
      // VALIDA√á√ÉO CR√çTICA: Verificar ordem e contagem das contas
      console.log("\nüîç VALIDANDO REMAINING_ACCOUNTS PARA CONTRATO DE AIRDROP:");
      console.log(`  Index 0 (Pool): ${allRemainingAccounts[0].pubkey.toString()}`);
      console.log(`  Index 1 (A_Vault): ${allRemainingAccounts[1].pubkey.toString()}`);
      console.log(`  Index 2 (A_Vault_LP): ${allRemainingAccounts[2].pubkey.toString()}`);
      console.log(`  Index 3 (A_Vault_LP_Mint): ${allRemainingAccounts[3].pubkey.toString()}`);
      console.log(`  Index 4 (A_Token_Vault): ${allRemainingAccounts[4].pubkey.toString()}`);
      console.log(`  Index 5 (Chainlink_Feed): ${allRemainingAccounts[5].pubkey.toString()}`);
      console.log(`  Index 6 (Chainlink_Program): ${allRemainingAccounts[6].pubkey.toString()}`);
      
      if (uplineAccounts.length > 0) {
        console.log(`  Indices 7+ (${uplineAccounts.length} contas upline em ${uplineAccounts.length/3} trios)`);
      }
      
      // Verificar endere√ßos corretos
      if (!allRemainingAccounts[0].pubkey.equals(POOL_ADDRESS) ||
          !allRemainingAccounts[1].pubkey.equals(A_VAULT) ||
          !allRemainingAccounts[5].pubkey.equals(SOL_USD_FEED) || 
          !allRemainingAccounts[6].pubkey.equals(CHAINLINK_PROGRAM)) {
        console.error("‚ùå ERRO: Ordem das contas cr√≠ticas est√° incorreta!");
        return;
      }
      
      console.log(`‚úÖ Todas as ${allRemainingAccounts.length} contas validadas para o contrato de airdrop`);
      
      // Gerar instru√ß√£o com Anchor
      console.log("\nüîß Gerando instru√ß√£o de airdrop com Anchor...");
      const anchorIx = await program.methods
        .registerWithSolDeposit(new BN(FIXED_DEPOSIT_AMOUNT))
        .accounts({
          state: STATE_ADDRESS,
          userWallet: walletKeypair.publicKey,
          referrer: referrerAccount,
          referrerWallet: referrerWallet,
          user: userAccount,
          tempDonutVault: tempDonutVault,
          tempDonutAuthority: tempDonutAuthority,
          pool: POOL_ADDRESS,
          bVault: B_VAULT,
          bTokenVault: B_TOKEN_VAULT,
          bVaultLpMint: B_VAULT_LP_MINT,
          bVaultLp: B_VAULT_LP,
          vaultProgram: VAULT_PROGRAM,
          ammProgram: METEORA_AMM_PROGRAM,
          programSolVault: programSolVault,
          tokenMint: TOKEN_MINT,
          programTokenVault: PROGRAM_TOKEN_VAULT,
          referrerTokenAccount: referrerTokenAccount,
          tokenMintAuthority: tokenMintAuthority,
          vaultAuthority: vaultAuthority,
          tokenProgram: SPL_TOKEN_PROGRAM_ID,
          systemProgram: SYSTEM_PROGRAM_ID,
          associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
          rent: SYSVAR_RENT_PUBKEY,
        })
        .remainingAccounts(allRemainingAccounts)
        .instruction();

      // Criar instru√ß√£o manual para transa√ß√£o versionada
      const ixData = anchorIx.data;
      console.log(`üîç Discriminador da instru√ß√£o de airdrop: ${Buffer.from(ixData.slice(0, 8)).toString('hex')}`);

      const manualRegisterInstruction = new TransactionInstruction({
        keys: anchorIx.keys,
        programId: MATRIX_PROGRAM_ID,
        data: ixData
      });

      // Criar array de instru√ß√µes
      const instructions = [
        modifyComputeUnits,
        setPriority,
        manualRegisterInstruction
      ];

      let txid;

      // Usar transa√ß√£o versionada se ALT dispon√≠vel, sen√£o legacy
      if (lookupTableAccount) {
        console.log("\nüîß Criando mensagem V0 com lookup table...");
        const messageV0 = new TransactionMessage({
          payerKey: walletKeypair.publicKey,
          recentBlockhash: blockhash,
          instructions
        }).compileToV0Message([lookupTableAccount]);

        const transaction = new VersionedTransaction(messageV0);
        transaction.sign([walletKeypair]);

        console.log("‚úÖ Transa√ß√£o versionada de airdrop criada e assinada");
        console.log(`üìä Usando ALT com ${lookupTableAccount.state.addresses.length} endere√ßos`);
        console.log(`‚öôÔ∏è Vers√£o da transa√ß√£o: V0 (Sistema de Airdrop)`);

        // Enviar transa√ß√£o versionada
        console.log("\nüì§ ENVIANDO TRANSA√á√ÉO VERSIONADA DE AIRDROP...");
        
        txid = await connection.sendTransaction(transaction, {
          maxRetries: 5,
          skipPreflight: true
        });
      } else {
        console.log("\nüîß Usando transa√ß√£o legacy (sem ALT)...");
        
        const legacyTx = new Transaction();
        legacyTx.add(...instructions);
        legacyTx.feePayer = walletKeypair.publicKey;
        legacyTx.recentBlockhash = blockhash;
        legacyTx.sign(walletKeypair);

        console.log("\nüì§ ENVIANDO TRANSA√á√ÉO LEGACY DE AIRDROP...");
        
        txid = await connection.sendRawTransaction(legacyTx.serialize(), {
          maxRetries: 5,
          skipPreflight: true
        });
      }
      
      console.log("‚úÖ Transa√ß√£o enviada: " + txid);
      console.log(`üîç Link do explorador: https://explorer.solana.com/tx/${txid}?cluster=devnet`);
      
      console.log("\n‚è≥ Aguardando confirma√ß√£o com valida√ß√µes de airdrop...");
      const confirmation = await connection.confirmTransaction(
        {
          signature: txid,
          blockhash: blockhash,
          lastValidBlockHeight: lastValidBlockHeight,
        },
        'confirmed'
      );
      
      if (confirmation.value.err) {
        throw new Error(`Erro de confirma√ß√£o da transa√ß√£o: ${JSON.stringify(confirmation.value.err)}`);
      }
      
      console.log("‚úÖ Transa√ß√£o confirmada com sistema de airdrop!");
      
      // Verificar resultados
      console.log("\nüîç VERIFICANDO RESULTADOS COM VALIDA√á√ïES DE AIRDROP...");
      
      try {
        // Verificar conta do usu√°rio
        const userInfo = await program.account.userAccount.fetch(userAccount);
        console.log("\nüìã CONFIRMA√á√ÉO DE REGISTRO DE AIRDROP:");
        console.log("‚úÖ Usu√°rio registrado: " + userInfo.isRegistered);
        console.log("üßë‚Äçü§ù‚Äçüßë Referenciador: " + userInfo.referrer.toString());
        console.log("üî¢ Depth: " + userInfo.upline.depth.toString());
        console.log("üìä Slots preenchidos: " + userInfo.chain.filledSlots + "/3");
        
        // AIRDROP SYSTEM: Verificar campos espec√≠ficos
        console.log("\nüéØ DADOS DO SISTEMA DE AIRDROP:");
        console.log("üìä Matrizes completadas: " + userInfo.completedMatricesTotal.toString());
        console.log("üí∞ DONUT ganho: " + userInfo.totalDonutEarned.toString());
        console.log("üéÅ DONUT coletado: " + userInfo.totalDonutClaimed.toString());
        
        const available = userInfo.totalDonutEarned - userInfo.totalDonutClaimed;
        console.log("üéÅ Dispon√≠vel para claim: " + available.toString());
        console.log("üìÖ √öltima semana processada: " + userInfo.lastProcessedWeek.toString());
        
        // Verificar owner_wallet field
        if (userInfo.ownerWallet) {
          console.log("\nüìã CAMPOS DE SEGURAN√áA DA CONTA:");
          console.log("üë§ Owner Wallet: " + userInfo.ownerWallet.toString());
          
          if (userInfo.ownerWallet.equals(walletKeypair.publicKey)) {
            console.log("‚úÖ Campo owner_wallet corretamente protegido");
          } else {
            console.log("‚ùå ALERTA DE SEGURAN√áA: Owner Wallet n√£o confere!");
          }
        }
        
        // Exibir informa√ß√µes de upline
        if (userInfo.upline.upline && userInfo.upline.upline.length > 0) {
          console.log("\nüìã INFORMA√á√ïES DE UPLINE SEGURAS:");
          userInfo.upline.upline.forEach((entry, index) => {
            console.log(`  Upline #${index+1}:`);
            console.log(`    PDA: ${entry.pda.toString()}`);
            console.log(`    Wallet: ${entry.wallet.toString()}`);
          });
        }
        
        // Verificar dados semanais
        if (userInfo.weeklyMatrices && userInfo.weeklyMatrices.length > 0) {
          console.log("\nüìä DADOS SEMANAIS DO AIRDROP:");
          userInfo.weeklyMatrices.forEach((week, index) => {
            console.log(`  Semana ${week.weekNumber}: ${week.matricesCompleted} matrizes`);
          });
        } else {
          console.log("\nüìä Ainda sem dados semanais (normal para usu√°rio rec√©m-registrado)");
        }
        
        // Verificar estado do referenciador ap√≥s registro
        const newReferrerInfo = await program.account.userAccount.fetch(referrerAccount);
        console.log("\nüìã ESTADO DO REFERENCIADOR AP√ìS PROCESSAMENTO DE AIRDROP:");
        console.log("üìä Slots preenchidos: " + newReferrerInfo.chain.filledSlots + "/3");
        
        // AIRDROP SYSTEM: Verificar dados do referenciador
        console.log("üìä Matrizes completadas: " + newReferrerInfo.completedMatricesTotal.toString());
        console.log("üí∞ DONUT ganho: " + newReferrerInfo.totalDonutEarned.toString());
        console.log("üéÅ DONUT coletado: " + newReferrerInfo.totalDonutClaimed.toString());
        
        // Verificar valores reservados
        if (newReferrerInfo.reservedSol > 0) {
          console.log(`üí∞ SOL Reservado: ${newReferrerInfo.reservedSol / 1e9} SOL`);
        }
        
        // Se foi SLOT 3, verificar processamento de recurs√£o
        if (isSlot3 && uplineAccounts.length > 0) {
          console.log("\nüîÑ VERIFICANDO RESULTADO DA RECURS√ÉO DE AIRDROP:");
          
          let processedUplines = 0;
          for (let i = 0; i < uplineAccounts.length; i += 3) {
            if (i >= uplineAccounts.length) break;
            
            try {
              const uplineAccount = uplineAccounts[i].pubkey;
              console.log(`\n  Verificando upline seguro: ${uplineAccount.toString()}`);
              
              const uplineInfo = await program.account.userAccount.fetch(uplineAccount);
              console.log(`  Slots preenchidos: ${uplineInfo.chain.filledSlots}/3`);
              
              // Verificar se referenciador foi adicionado √† matriz do upline
              for (let j = 0; j < uplineInfo.chain.filledSlots; j++) {
                if (uplineInfo.chain.slots[j] && uplineInfo.chain.slots[j].equals(referrerAccount)) {
                  console.log(`  ‚úÖ REFERENCIADOR ADICIONADO COM SEGURAN√áA AO SLOT ${j + 1}!`);
                  processedUplines++;
                  break;
                }
              }
              
              // AIRDROP SYSTEM: Verificar valores do upline
              console.log(`  üìä Matrizes completadas: ${uplineInfo.completedMatricesTotal.toString()}`);
              console.log(`  üí∞ DONUT ganho: ${uplineInfo.totalDonutEarned.toString()}`);
              
              if (uplineInfo.reservedSol > 0) {
                console.log(`  üí∞ SOL Reservado: ${uplineInfo.reservedSol / 1e9} SOL`);
              }
            } catch (e) {
              console.log(`  Erro ao verificar upline: ${e.message}`);
            }
          }
          
          console.log(`\n  ‚úÖ Recurs√£o de airdrop processou ${processedUplines}/${uplineAccounts.length / 3} uplines`);
        }
        
        // Obter e mostrar novo saldo
        const newBalance = await connection.getBalance(walletKeypair.publicKey);
        console.log("\nüíº Seu novo saldo: " + newBalance / 1e9 + " SOL");
        console.log("üí∞ SOL gasto: " + (balance - newBalance) / 1e9 + " SOL");
        
        console.log("\nüéâ REGISTRO COM REFERENCIADOR NO SISTEMA DE AIRDROP CONCLU√çDO! üéâ");
        console.log("üéØ TODAS AS VALIDA√á√ïES DE AIRDROP PASSARAM!");
        console.log("================================================================");
        console.log("\n‚ö†Ô∏è IMPORTANTE: SALVE ESTES ENDERE√áOS PARA USO FUTURO:");
        console.log("üîë SEU ENDERE√áO: " + walletKeypair.publicKey.toString());
        console.log("üîë SUA CONTA PDA: " + userAccount.toString());
        console.log("üîë REFERENCIADOR: " + referrerAddress.toString());
        console.log("üõ°Ô∏è N√çVEL DE SEGURAN√áA: M√ÅXIMO COM AIRDROP");
        
        console.log("\nüéØ PR√ìXIMOS PASSOS:");
        console.log("1. üîÑ Complete matrizes para ganhar rewards de airdrop");
        console.log("2. üéÅ Use claim_airdrop para coletar DONUT ganhos");
        console.log("3. üìä Monitore com get_user_airdrop_info");
        console.log("4. üë• Convide outros usu√°rios para expandir a rede");
        console.log("5. üìà Acompanhe sistema com get_program_info");
        
        console.log("\nüî• SISTEMA DEFLATIONARY ATIVO:");
        console.log("‚Ä¢ Slot 1: Swap SOL ‚Üí DONUT ‚Üí Burn (deflationary)");
        console.log("‚Ä¢ Slot 2: Reserva SOL para pagamento");
        console.log("‚Ä¢ Slot 3: Paga SOL + Recurs√£o com Swap+Burn");
        console.log("‚Ä¢ Airdrops: 36 semanas progressivas baseadas em matrizes");
        console.log("‚Ä¢ Claims: Sob demanda via instru√ß√£o dedicada");
        
      } catch (e) {
        console.error("‚ùå ERRO AO VERIFICAR RESULTADOS DE AIRDROP:", e);
      }
    } catch (error) {
      console.error("‚ùå ERRO NO REGISTRO DE AIRDROP:", error);
      
      if (error.logs) {
        console.log("\nüìã LOGS DE ERRO DETALHADOS DO AIRDROP:");
        const relevantLogs = error.logs.filter(log => 
          log.includes("Program log:") || 
          log.includes("Error") || 
          log.includes("error") ||
          log.includes("CRITICAL") ||
          log.includes("ReentrancyLock") ||
          log.includes("overflow") ||
          log.includes("SLOT 3") ||
          log.includes("airdrop") ||
          log.includes("week") ||
          log.includes("matrix") ||
          log.includes("burn") ||
          log.includes("swap")
        );
        
        if (relevantLogs.length > 0) {
          console.log("üéØ Logs relacionados ao airdrop:");
          relevantLogs.forEach((log, i) => console.log(`  ${i}: ${log}`));
        } else {
          error.logs.forEach((log, i) => console.log(`  ${i}: ${log}`));
        }
      }
    }
  } catch (error) {
    console.error("‚ùå ERRO GERAL DE AIRDROP:", error);
    
    if (error.logs) {
      console.log("\nüìã DETALHES DO ERRO DE AIRDROP:");
      error.logs.forEach((log, i) => console.log(`${i}: ${log}`));
    }
  }
}

main();